{"ast":null,"code":"// import { useReducer } from 'react';\nimport { UPDATE_PRODUCTS, UPDATE_CATEGORIES, UPDATE_CURRENT_CATEGORY, ADD_TO_CART, ADD_MULTIPLE_TO_CART, REMOVE_FROM_CART, UPDATE_CART_QUANTITY, CLEAR_CART, TOGGLE_CART } from './actions';\nconst initialState = {\n  products: [],\n  cart: [],\n  cartOpen: false,\n  categories: [],\n  currentCategory: ''\n};\n\nconst reducer = (state = initialState, action) => {\n  switch (action.type) {\n    // if action type value is the value of `UPDATE_PRODUCTS`, return a new state object with an updated products array\n    case UPDATE_PRODUCTS:\n      return { ...state,\n        products: [...action.products]\n      };\n    // if action type value is the value of `UPDATE_CATEGORIES`, return a new state object with an updated categories array\n\n    case UPDATE_CATEGORIES:\n      return { ...state,\n        categories: [...action.categories]\n      };\n\n    case UPDATE_CURRENT_CATEGORY:\n      return { ...state,\n        currentCategory: action.currentCategory\n      };\n\n    case ADD_TO_CART:\n      return { ...state,\n        cartOpen: true,\n        cart: [...state.cart, action.product]\n      };\n\n    case ADD_MULTIPLE_TO_CART:\n      return { ...state,\n        cart: [...state.cart, ...action.products]\n      };\n\n    case REMOVE_FROM_CART:\n      let newState = state.cart.filter(product => {\n        return product._id !== action._id;\n      });\n      return { ...state,\n        cartOpen: newState.length > 0,\n        cart: newState\n      };\n\n    case UPDATE_CART_QUANTITY:\n      return { ...state,\n        cartOpen: true,\n        cart: state.cart.map(product => {\n          if (action._id === product._id) {\n            product.purchaseQuantity = action.purchaseQuantity;\n          }\n\n          return product;\n        })\n      };\n\n    case CLEAR_CART:\n      return { ...state,\n        cartOpen: false,\n        cart: []\n      };\n\n    case TOGGLE_CART:\n      return { ...state,\n        cartOpen: !state.cartOpen\n      };\n\n    default:\n      return state;\n  }\n}; // export function useProductReducer(initialState) {\n//     return useReducer(reducer, initialState);\n//   }\n\n\nexport default reducer;","map":{"version":3,"sources":["C:/Users/Trevor Pino/Desktop/flippin-finds/client/src/utils/reducers.js"],"names":["UPDATE_PRODUCTS","UPDATE_CATEGORIES","UPDATE_CURRENT_CATEGORY","ADD_TO_CART","ADD_MULTIPLE_TO_CART","REMOVE_FROM_CART","UPDATE_CART_QUANTITY","CLEAR_CART","TOGGLE_CART","initialState","products","cart","cartOpen","categories","currentCategory","reducer","state","action","type","product","newState","filter","_id","length","map","purchaseQuantity"],"mappings":"AAAA;AAEA,SACIA,eADJ,EAEIC,iBAFJ,EAGIC,uBAHJ,EAIIC,WAJJ,EAKIC,oBALJ,EAMIC,gBANJ,EAOIC,oBAPJ,EAQIC,UARJ,EASIC,WATJ,QAUS,WAVT;AAYA,MAAMC,YAAY,GAAG;AACjBC,EAAAA,QAAQ,EAAE,EADO;AAEjBC,EAAAA,IAAI,EAAE,EAFW;AAGjBC,EAAAA,QAAQ,EAAE,KAHO;AAIjBC,EAAAA,UAAU,EAAE,EAJK;AAKjBC,EAAAA,eAAe,EAAE;AALA,CAArB;;AAQA,MAAMC,OAAO,GAAG,CAACC,KAAK,GAAGP,YAAT,EAAuBQ,MAAvB,KAAkC;AAClD,UAAQA,MAAM,CAACC,IAAf;AACI;AACA,SAAKlB,eAAL;AACA,aAAO,EACH,GAAGgB,KADA;AAEHN,QAAAA,QAAQ,EAAE,CAAC,GAAGO,MAAM,CAACP,QAAX;AAFP,OAAP;AAIA;;AACA,SAAKT,iBAAL;AACA,aAAO,EACH,GAAGe,KADA;AAEHH,QAAAA,UAAU,EAAE,CAAC,GAAGI,MAAM,CAACJ,UAAX;AAFT,OAAP;;AAIA,SAAKX,uBAAL;AACA,aAAO,EACH,GAAGc,KADA;AAEHF,QAAAA,eAAe,EAAEG,MAAM,CAACH;AAFrB,OAAP;;AAIA,SAAKX,WAAL;AACA,aAAO,EACH,GAAGa,KADA;AAEHJ,QAAAA,QAAQ,EAAE,IAFP;AAGHD,QAAAA,IAAI,EAAE,CAAC,GAAGK,KAAK,CAACL,IAAV,EAAgBM,MAAM,CAACE,OAAvB;AAHH,OAAP;;AAKA,SAAKf,oBAAL;AACA,aAAO,EACH,GAAGY,KADA;AAEHL,QAAAA,IAAI,EAAE,CAAC,GAAGK,KAAK,CAACL,IAAV,EAAgB,GAAGM,MAAM,CAACP,QAA1B;AAFH,OAAP;;AAIA,SAAKL,gBAAL;AACI,UAAIe,QAAQ,GAAGJ,KAAK,CAACL,IAAN,CAAWU,MAAX,CAAkBF,OAAO,IAAI;AACxC,eAAOA,OAAO,CAACG,GAAR,KAAgBL,MAAM,CAACK,GAA9B;AACH,OAFc,CAAf;AAIA,aAAO,EACH,GAAGN,KADA;AAEHJ,QAAAA,QAAQ,EAAEQ,QAAQ,CAACG,MAAT,GAAkB,CAFzB;AAGHZ,QAAAA,IAAI,EAAES;AAHH,OAAP;;AAKJ,SAAKd,oBAAL;AACA,aAAO,EACH,GAAGU,KADA;AAEHJ,QAAAA,QAAQ,EAAE,IAFP;AAGHD,QAAAA,IAAI,EAAEK,KAAK,CAACL,IAAN,CAAWa,GAAX,CAAeL,OAAO,IAAI;AAChC,cAAIF,MAAM,CAACK,GAAP,KAAeH,OAAO,CAACG,GAA3B,EAAgC;AAC5BH,YAAAA,OAAO,CAACM,gBAAR,GAA2BR,MAAM,CAACQ,gBAAlC;AACH;;AACD,iBAAON,OAAP;AACC,SALK;AAHH,OAAP;;AAUA,SAAKZ,UAAL;AACA,aAAO,EACH,GAAGS,KADA;AAEHJ,QAAAA,QAAQ,EAAE,KAFP;AAGHD,QAAAA,IAAI,EAAE;AAHH,OAAP;;AAKA,SAAKH,WAAL;AACA,aAAO,EACH,GAAGQ,KADA;AAEHJ,QAAAA,QAAQ,EAAE,CAACI,KAAK,CAACJ;AAFd,OAAP;;AAKA;AACA,aAAOI,KAAP;AA/DJ;AAiEC,CAlED,C,CAoEA;AACA;AACA;;;AAEA,eAAeD,OAAf","sourcesContent":["// import { useReducer } from 'react';\r\n\r\nimport {\r\n    UPDATE_PRODUCTS,\r\n    UPDATE_CATEGORIES,\r\n    UPDATE_CURRENT_CATEGORY,\r\n    ADD_TO_CART,\r\n    ADD_MULTIPLE_TO_CART,\r\n    REMOVE_FROM_CART,\r\n    UPDATE_CART_QUANTITY,\r\n    CLEAR_CART,\r\n    TOGGLE_CART\r\n  } from './actions';\r\n\r\nconst initialState = {\r\n    products: [],\r\n    cart: [],\r\n    cartOpen: false,\r\n    categories: [],\r\n    currentCategory: '',\r\n}\r\n\r\nconst reducer = (state = initialState, action) => {\r\nswitch (action.type) {\r\n    // if action type value is the value of `UPDATE_PRODUCTS`, return a new state object with an updated products array\r\n    case UPDATE_PRODUCTS:\r\n    return {\r\n        ...state,\r\n        products: [...action.products]\r\n    };\r\n    // if action type value is the value of `UPDATE_CATEGORIES`, return a new state object with an updated categories array\r\n    case UPDATE_CATEGORIES:\r\n    return {\r\n        ...state,\r\n        categories: [...action.categories]\r\n    };\r\n    case UPDATE_CURRENT_CATEGORY:\r\n    return {\r\n        ...state,\r\n        currentCategory: action.currentCategory\r\n    };\r\n    case ADD_TO_CART:\r\n    return {\r\n        ...state,\r\n        cartOpen: true,\r\n        cart: [...state.cart, action.product]\r\n    };\r\n    case ADD_MULTIPLE_TO_CART:\r\n    return {\r\n        ...state,\r\n        cart: [...state.cart, ...action.products],\r\n    };\r\n    case REMOVE_FROM_CART:\r\n        let newState = state.cart.filter(product => {\r\n            return product._id !== action._id;\r\n        });\r\n\r\n        return {\r\n            ...state,\r\n            cartOpen: newState.length > 0,\r\n            cart: newState\r\n        };\r\n    case UPDATE_CART_QUANTITY:\r\n    return {\r\n        ...state,\r\n        cartOpen: true,\r\n        cart: state.cart.map(product => {\r\n        if (action._id === product._id) {\r\n            product.purchaseQuantity = action.purchaseQuantity;\r\n        }\r\n        return product;\r\n        })\r\n    };\r\n    case CLEAR_CART:\r\n    return {\r\n        ...state,\r\n        cartOpen: false,\r\n        cart: []\r\n    };\r\n    case TOGGLE_CART:\r\n    return {\r\n        ...state,\r\n        cartOpen: !state.cartOpen\r\n    };\r\n\r\n    default:\r\n    return state;\r\n}\r\n};\r\n\r\n// export function useProductReducer(initialState) {\r\n//     return useReducer(reducer, initialState);\r\n//   }\r\n\r\nexport default reducer; "]},"metadata":{},"sourceType":"module"}