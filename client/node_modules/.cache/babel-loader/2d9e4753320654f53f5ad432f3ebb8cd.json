{"ast":null,"code":"import React,{useEffect}from'react';import{useQuery}from'@apollo/react-hooks';import ProductItem from\"../ProductItem\";import{QUERY_PRODUCTS}from\"../../utils/queries\";import spinner from\"../../assets/spinner.gif\";// import { useStoreContext } from '../../utils/GlobalState';\nimport{UPDATE_PRODUCTS}from'../../utils/actions';import{idbPromise}from\"../../utils/helpers\";import{useSelector,useDispatch}from\"react-redux\";function ProductList(){// const [state, dispatch] = useStoreContext();\nvar state=useSelector(function(state){return state;});var dispatch=useDispatch();var currentCategory=state.currentCategory;var _useQuery=useQuery(QUERY_PRODUCTS),loading=_useQuery.loading,data=_useQuery.data;useEffect(function(){if(data){dispatch({type:UPDATE_PRODUCTS,products:data.products});data.products.forEach(function(product){idbPromise('products','put',product);});// add else if to check if `loading` is undefined in `useQuery()` Hook\n}else if(!loading){// since we're offline, get all of the data from the `products` store\nidbPromise('products','get').then(function(products){// use retrieved data to set global state for offline browsing\ndispatch({type:UPDATE_PRODUCTS,products:products});});}},[data,loading,dispatch]);function filterProducts(){if(!currentCategory){return state.products;}return state.products.filter(function(product){return product.category._id===currentCategory;});}return/*#__PURE__*/React.createElement(\"div\",{className:\"my-2\"},/*#__PURE__*/React.createElement(\"h2\",{className:\"prodh2\"},\"The Product\"),state.products.length?/*#__PURE__*/React.createElement(\"div\",{className:\"flex-row\"},filterProducts().map(function(product){return/*#__PURE__*/React.createElement(ProductItem,{key:product._id,_id:product._id,image:product.image,name:product.name,price:product.price,quantity:product.quantity});})):/*#__PURE__*/React.createElement(\"h3\",null,\"You haven't added any products yet!\"),loading?/*#__PURE__*/React.createElement(\"img\",{src:spinner,alt:\"loading\"}):null);}export default ProductList;","map":{"version":3,"sources":["C:/Users/Trevor Pino/Desktop/flippin-finds/client/src/components/ProductList/index.js"],"names":["React","useEffect","useQuery","ProductItem","QUERY_PRODUCTS","spinner","UPDATE_PRODUCTS","idbPromise","useSelector","useDispatch","ProductList","state","dispatch","currentCategory","loading","data","type","products","forEach","product","then","filterProducts","filter","category","_id","length","map","image","name","price","quantity"],"mappings":"AAAA,MAAOA,CAAAA,KAAP,EAAgBC,SAAhB,KAAiC,OAAjC,CACA,OAASC,QAAT,KAAyB,qBAAzB,CAEA,MAAOC,CAAAA,WAAP,KAAwB,gBAAxB,CACA,OAASC,cAAT,KAA+B,qBAA/B,CACA,MAAOC,CAAAA,OAAP,KAAoB,0BAApB,CAEA;AACA,OAASC,eAAT,KAAgC,qBAAhC,CAEA,OAASC,UAAT,KAA2B,qBAA3B,CACA,OAASC,WAAT,CAAsBC,WAAtB,KAAyC,aAAzC,CAEA,QAASC,CAAAA,WAAT,EAAuB,CACrB;AACA,GAAMC,CAAAA,KAAK,CAAGH,WAAW,CAAC,SAAAG,KAAK,QAAIA,CAAAA,KAAJ,EAAN,CAAzB,CAEA,GAAMC,CAAAA,QAAQ,CAAGH,WAAW,EAA5B,CAJqB,GAMbI,CAAAA,eANa,CAMOF,KANP,CAMbE,eANa,eAQKX,QAAQ,CAACE,cAAD,CARb,CAQbU,OARa,WAQbA,OARa,CAQJC,IARI,WAQJA,IARI,CAUrBd,SAAS,CAAC,UAAM,CACd,GAAGc,IAAH,CAAS,CACPH,QAAQ,CAAC,CACPI,IAAI,CAAEV,eADC,CAEPW,QAAQ,CAAEF,IAAI,CAACE,QAFR,CAAD,CAAR,CAKAF,IAAI,CAACE,QAAL,CAAcC,OAAd,CAAsB,SAACC,OAAD,CAAa,CACjCZ,UAAU,CAAC,UAAD,CAAa,KAAb,CAAoBY,OAApB,CAAV,CACD,CAFD,EAGA;AACD,CAVD,IAUO,IAAI,CAACL,OAAL,CAAc,CACnB;AACAP,UAAU,CAAC,UAAD,CAAa,KAAb,CAAV,CAA8Ba,IAA9B,CAAmC,SAACH,QAAD,CAAc,CAC/C;AACAL,QAAQ,CAAC,CACPI,IAAI,CAAEV,eADC,CAEPW,QAAQ,CAAEA,QAFH,CAAD,CAAR,CAID,CAND,EAOD,CACF,CArBQ,CAqBN,CAACF,IAAD,CAAOD,OAAP,CAAgBF,QAAhB,CArBM,CAAT,CAuBA,QAASS,CAAAA,cAAT,EAA0B,CACxB,GAAI,CAACR,eAAL,CAAsB,CACpB,MAAOF,CAAAA,KAAK,CAACM,QAAb,CACD,CAED,MAAON,CAAAA,KAAK,CAACM,QAAN,CAAeK,MAAf,CAAsB,SAAAH,OAAO,QAAIA,CAAAA,OAAO,CAACI,QAAR,CAAiBC,GAAjB,GAAyBX,eAA7B,EAA7B,CAAP,CACD,CAED,mBACE,2BAAK,SAAS,CAAC,MAAf,eACE,0BAAI,SAAS,CAAC,QAAd,gBADF,CAEGF,KAAK,CAACM,QAAN,CAAeQ,MAAf,cACC,2BAAK,SAAS,CAAC,UAAf,EACKJ,cAAc,GAAGK,GAAjB,CAAqB,SAAAP,OAAO,qBACzB,oBAAC,WAAD,EACE,GAAG,CAAGA,OAAO,CAACK,GADhB,CAEE,GAAG,CAAEL,OAAO,CAACK,GAFf,CAGE,KAAK,CAAEL,OAAO,CAACQ,KAHjB,CAIE,IAAI,CAAER,OAAO,CAACS,IAJhB,CAKE,KAAK,CAAET,OAAO,CAACU,KALjB,CAME,QAAQ,CAAEV,OAAO,CAACW,QANpB,EADyB,EAA5B,CADL,CADD,cAcC,oEAhBJ,CAkBIhB,OAAO,cACT,2BAAK,GAAG,CAAET,OAAV,CAAmB,GAAG,CAAC,SAAvB,EADS,CAC4B,IAnBvC,CADF,CAuBD,CAED,cAAeK,CAAAA,WAAf","sourcesContent":["import React, { useEffect } from 'react';\r\nimport { useQuery } from '@apollo/react-hooks';\r\n\r\nimport ProductItem from \"../ProductItem\";\r\nimport { QUERY_PRODUCTS } from \"../../utils/queries\";\r\nimport spinner from \"../../assets/spinner.gif\"\r\n\r\n// import { useStoreContext } from '../../utils/GlobalState';\r\nimport { UPDATE_PRODUCTS } from '../../utils/actions';\r\n\r\nimport { idbPromise } from \"../../utils/helpers\";\r\nimport { useSelector, useDispatch } from \"react-redux\";\r\n\r\nfunction ProductList() {\r\n  // const [state, dispatch] = useStoreContext();\r\n  const state = useSelector(state => state);\r\n\r\n  const dispatch = useDispatch();\r\n\r\n  const { currentCategory } = state;\r\n\r\n  const { loading, data } = useQuery(QUERY_PRODUCTS);\r\n\r\n  useEffect(() => {\r\n    if(data) {\r\n      dispatch({\r\n        type: UPDATE_PRODUCTS,\r\n        products: data.products\r\n      });\r\n  \r\n      data.products.forEach((product) => {\r\n        idbPromise('products', 'put', product);\r\n      });\r\n      // add else if to check if `loading` is undefined in `useQuery()` Hook\r\n    } else if (!loading) {\r\n      // since we're offline, get all of the data from the `products` store\r\n      idbPromise('products', 'get').then((products) => {\r\n        // use retrieved data to set global state for offline browsing\r\n        dispatch({\r\n          type: UPDATE_PRODUCTS,\r\n          products: products\r\n        });\r\n      });\r\n    }\r\n  }, [data, loading, dispatch]);\r\n\r\n  function filterProducts() {\r\n    if (!currentCategory) {\r\n      return state.products;\r\n    }\r\n\r\n    return state.products.filter(product => product.category._id === currentCategory);\r\n  }\r\n\r\n  return (\r\n    <div className=\"my-2\">\r\n      <h2 className=\"prodh2\">The Product</h2>\r\n      {state.products.length ? (\r\n        <div className=\"flex-row\">\r\n            {filterProducts().map(product => (\r\n                <ProductItem\r\n                  key= {product._id}\r\n                  _id={product._id}\r\n                  image={product.image}\r\n                  name={product.name}\r\n                  price={product.price}\r\n                  quantity={product.quantity}\r\n                />\r\n            ))}\r\n        </div>\r\n      ) : (\r\n        <h3>You haven't added any products yet!</h3>\r\n      )}\r\n      { loading ? \r\n      <img src={spinner} alt=\"loading\" />: null}\r\n    </div>\r\n  );\r\n}\r\n\r\nexport default ProductList;\r\n"]},"metadata":{},"sourceType":"module"}