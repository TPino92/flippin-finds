{"ast":null,"code":"import _objectSpread from\"C:\\\\Users\\\\Trevor Pino\\\\Desktop\\\\flippin-finds\\\\client\\\\node_modules\\\\babel-preset-react-app\\\\node_modules\\\\@babel\\\\runtime/helpers/esm/objectSpread2\";import _slicedToArray from\"C:\\\\Users\\\\Trevor Pino\\\\Desktop\\\\flippin-finds\\\\client\\\\node_modules\\\\babel-preset-react-app\\\\node_modules\\\\@babel\\\\runtime/helpers/esm/slicedToArray\";import React,{useEffect,useState}from\"react\";import{Link,useParams}from\"react-router-dom\";import{useQuery}from'@apollo/react-hooks';import{QUERY_PRODUCTS}from\"../utils/queries\";import spinner from'../assets/spinner.gif';// import { useStoreContext } from \"../utils/GlobalState\";\nimport{REMOVE_FROM_CART,UPDATE_CART_QUANTITY,ADD_TO_CART,UPDATE_PRODUCTS}from'../utils/actions';import Cart from'../components/Cart';import{idbPromise}from\"../utils/helpers\";import{useSelector,useDispatch}from\"react-redux\";function Detail(){// const [state, dispatch] = useStoreContext();\nvar state=useSelector(function(state){return state;});var dispatch=useDispatch();var _useParams=useParams(),id=_useParams.id;var _useState=useState({}),_useState2=_slicedToArray(_useState,2),currentProduct=_useState2[0],setCurrentProduct=_useState2[1];var _useQuery=useQuery(QUERY_PRODUCTS),loading=_useQuery.loading,data=_useQuery.data;var products=state.products,cart=state.cart;useEffect(function(){// already in global store\nif(products.length){setCurrentProduct(products.find(function(product){return product._id===id;}));}// retrieved from server\nelse if(data){dispatch({type:UPDATE_PRODUCTS,products:data.products});data.products.forEach(function(product){idbPromise('products','put',product);});}// get cache from idb\nelse if(!loading){idbPromise('products','get').then(function(indexedProducts){dispatch({type:UPDATE_PRODUCTS,products:indexedProducts});});}},[products,data,loading,dispatch,id]);var addToCart=function addToCart(){var itemInCart=cart.find(function(cartItem){return cartItem._id===id;});if(itemInCart){dispatch({type:UPDATE_CART_QUANTITY,_id:id,purchaseQuantity:parseInt(itemInCart.purchaseQuantity)+1});// if we're updating quantity, use existing item data and increment purchaseQuantity value by one\nidbPromise('cart','put',_objectSpread(_objectSpread({},itemInCart),{},{purchaseQuantity:parseInt(itemInCart.purchaseQuantity)+1}));}else{dispatch({type:ADD_TO_CART,product:_objectSpread(_objectSpread({},currentProduct),{},{purchaseQuantity:1})});// if product isn't in the cart yet, add it to the current shopping cart in IndexedDB\nidbPromise('cart','put',_objectSpread(_objectSpread({},currentProduct),{},{purchaseQuantity:1}));}};var removeFromCart=function removeFromCart(){dispatch({type:REMOVE_FROM_CART,_id:currentProduct._id});// upon removal from cart, delete the item from IndexedDB using the `currentProduct._id` to locate what to remove\nidbPromise('cart','delete',_objectSpread({},currentProduct));};return/*#__PURE__*/React.createElement(React.Fragment,null,currentProduct?/*#__PURE__*/React.createElement(\"div\",{className:\"container my-1\"},/*#__PURE__*/React.createElement(Link,{to:\"/\"},\"\\u2190 Back to Products\"),/*#__PURE__*/React.createElement(\"h2\",null,currentProduct.name),/*#__PURE__*/React.createElement(\"p\",null,currentProduct.description),/*#__PURE__*/React.createElement(\"p\",null,/*#__PURE__*/React.createElement(\"strong\",null,\"Price:\"),\"$\",currentProduct.price,\" \",/*#__PURE__*/React.createElement(\"button\",{onClick:addToCart},\"Add to Stash\"),/*#__PURE__*/React.createElement(\"button\",{disabled:!cart.find(function(p){return p._id===currentProduct._id;}),onClick:removeFromCart},\"Remove from Stash\")),/*#__PURE__*/React.createElement(\"img\",{src:\"/images/\".concat(currentProduct.image),alt:currentProduct.name})):null,loading?/*#__PURE__*/React.createElement(\"img\",{src:spinner,alt:\"loading\"}):null,/*#__PURE__*/React.createElement(Cart,null));};export default Detail;","map":{"version":3,"sources":["C:/Users/Trevor Pino/Desktop/flippin-finds/client/src/pages/Detail.js"],"names":["React","useEffect","useState","Link","useParams","useQuery","QUERY_PRODUCTS","spinner","REMOVE_FROM_CART","UPDATE_CART_QUANTITY","ADD_TO_CART","UPDATE_PRODUCTS","Cart","idbPromise","useSelector","useDispatch","Detail","state","dispatch","id","currentProduct","setCurrentProduct","loading","data","products","cart","length","find","product","_id","type","forEach","then","indexedProducts","addToCart","itemInCart","cartItem","purchaseQuantity","parseInt","removeFromCart","name","description","price","p","image"],"mappings":"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","sourcesContent":["import React, { useEffect, useState } from \"react\";\r\nimport { Link, useParams } from \"react-router-dom\";\r\nimport { useQuery } from '@apollo/react-hooks';\r\n\r\nimport { QUERY_PRODUCTS } from \"../utils/queries\";\r\nimport spinner from '../assets/spinner.gif'\r\n\r\n// import { useStoreContext } from \"../utils/GlobalState\";\r\nimport {\r\n  REMOVE_FROM_CART,\r\n  UPDATE_CART_QUANTITY,\r\n  ADD_TO_CART,\r\n  UPDATE_PRODUCTS,\r\n} from '../utils/actions';\r\n\r\nimport Cart from '../components/Cart';\r\n\r\nimport { idbPromise } from \"../utils/helpers\";\r\n\r\nimport { useSelector, useDispatch } from \"react-redux\";\r\n\r\nfunction Detail() {\r\n  // const [state, dispatch] = useStoreContext();\r\n  const state = useSelector(state => state);\r\n\r\n  const dispatch = useDispatch(); \r\n  const { id } = useParams();\r\n\r\n  const [currentProduct, setCurrentProduct] = useState({})\r\n\r\n  const { loading, data } = useQuery(QUERY_PRODUCTS);\r\n\r\n  const { products, cart } = state;\r\n\r\n  useEffect(() => {\r\n    // already in global store\r\n    if (products.length) {\r\n      setCurrentProduct(products.find(product => product._id === id));\r\n    } \r\n    // retrieved from server\r\n    else if (data) {\r\n      dispatch({\r\n        type: UPDATE_PRODUCTS,\r\n        products: data.products\r\n      });\r\n  \r\n      data.products.forEach((product) => {\r\n        idbPromise('products', 'put', product);\r\n      });\r\n    }\r\n    // get cache from idb\r\n    else if (!loading) {\r\n      idbPromise('products', 'get').then((indexedProducts) => {\r\n        dispatch({\r\n          type: UPDATE_PRODUCTS,\r\n          products: indexedProducts\r\n        });\r\n      });\r\n    }\r\n  }, [products, data, loading, dispatch, id]);\r\n\r\n  const addToCart = () => {\r\n    const itemInCart = cart.find((cartItem) => cartItem._id === id)\r\n  \r\n    if (itemInCart) {\r\n      dispatch({\r\n        type: UPDATE_CART_QUANTITY,\r\n        _id: id,\r\n        purchaseQuantity: parseInt(itemInCart.purchaseQuantity) + 1\r\n      });\r\n      // if we're updating quantity, use existing item data and increment purchaseQuantity value by one\r\n      idbPromise('cart', 'put', {\r\n        ...itemInCart,\r\n        purchaseQuantity: parseInt(itemInCart.purchaseQuantity) + 1\r\n      });\r\n    } else {\r\n      dispatch({\r\n        type: ADD_TO_CART,\r\n        product: { ...currentProduct, purchaseQuantity: 1 }\r\n      });\r\n      // if product isn't in the cart yet, add it to the current shopping cart in IndexedDB\r\n      idbPromise('cart', 'put', { ...currentProduct, purchaseQuantity: 1 });\r\n    }\r\n  };\r\n\r\n  const removeFromCart = () => {\r\n    dispatch({\r\n      type: REMOVE_FROM_CART,\r\n      _id: currentProduct._id\r\n    });\r\n  \r\n    // upon removal from cart, delete the item from IndexedDB using the `currentProduct._id` to locate what to remove\r\n    idbPromise('cart', 'delete', { ...currentProduct });\r\n  };\r\n\r\n  return (\r\n    <>\r\n      {currentProduct ? (\r\n        <div className=\"container my-1\">\r\n          <Link to=\"/\">\r\n            ← Back to Products\r\n          </Link>\r\n\r\n          <h2>{currentProduct.name}</h2>\r\n\r\n          <p>\r\n            {currentProduct.description}\r\n          </p>\r\n\r\n          <p>\r\n            <strong>Price:</strong>\r\n            ${currentProduct.price}\r\n            {\" \"}\r\n            <button onClick={addToCart}>Add to Stash</button>\r\n            <button \r\n                disabled={!cart.find(p => p._id === currentProduct._id)} \r\n                onClick={removeFromCart}\r\n              >\r\n                Remove from Stash\r\n              </button>\r\n          </p>\r\n\r\n          <img\r\n            src={`/images/${currentProduct.image}`}\r\n            alt={currentProduct.name}\r\n          />\r\n        </div>\r\n      ) : null}\r\n      {\r\n        loading ? <img src={spinner} alt=\"loading\" /> : null\r\n      }\r\n      <Cart />\r\n    </>\r\n  );\r\n};\r\n\r\nexport default Detail;\r\n"]},"metadata":{},"sourceType":"module"}