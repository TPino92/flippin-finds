{"ast":null,"code":"export function pluralize(name,count){if(count===1){return name;}return name+'s';}export function idbPromise(storeName,method,object){return new Promise(function(resolve,reject){// open connection to the database `shop-shop` with the version of 1\nvar request=window.indexedDB.open('shop-shop',1);// create variables to hold reference to the database, transaction (tx), and object store\nvar db,tx,store;// if version has changed (or if this is the first time using the database), run this method and create the three object stores \nrequest.onupgradeneeded=function(e){var db=request.result;// create object store for each type of data and set \"primary\" key index to be the `_id` of the data\ndb.createObjectStore('products',{keyPath:'_id'});db.createObjectStore('categories',{keyPath:'_id'});db.createObjectStore('cart',{keyPath:'_id'});};// handle any errors with connecting\nrequest.onerror=function(e){console.log('There was an error');};// on database open success\nrequest.onsuccess=function(e){// save a reference of the database to the `db` variable\ndb=request.result;// open a transaction do whatever we pass into `storeName` (must match one of the object store names)\ntx=db.transaction(storeName,'readwrite');// save a reference to that object store\nstore=tx.objectStore(storeName);// if there's any errors, let us know\ndb.onerror=function(e){console.log('error',e);};switch(method){case'put':store.put(object);resolve(object);break;case'get':var all=store.getAll();all.onsuccess=function(){resolve(all.result);};break;case'delete':store.delete(object._id);break;default:console.log('No valid method');break;}// when the transaction is complete, close the connection\ntx.oncomplete=function(){db.close();};};});}","map":{"version":3,"sources":["C:/Users/Trevor Pino/Desktop/flippin-finds/client/src/utils/helpers.js"],"names":["pluralize","name","count","idbPromise","storeName","method","object","Promise","resolve","reject","request","window","indexedDB","open","db","tx","store","onupgradeneeded","e","result","createObjectStore","keyPath","onerror","console","log","onsuccess","transaction","objectStore","put","all","getAll","delete","_id","oncomplete","close"],"mappings":"AAAA,MAAO,SAASA,CAAAA,SAAT,CAAmBC,IAAnB,CAAyBC,KAAzB,CAAgC,CACrC,GAAIA,KAAK,GAAK,CAAd,CAAiB,CACf,MAAOD,CAAAA,IAAP,CACD,CACD,MAAOA,CAAAA,IAAI,CAAG,GAAd,CACD,CAED,MAAO,SAASE,CAAAA,UAAT,CAAoBC,SAApB,CAA+BC,MAA/B,CAAuCC,MAAvC,CAA+C,CACpD,MAAO,IAAIC,CAAAA,OAAJ,CAAY,SAACC,OAAD,CAAUC,MAAV,CAAqB,CACtC;AACA,GAAMC,CAAAA,OAAO,CAAGC,MAAM,CAACC,SAAP,CAAiBC,IAAjB,CAAsB,WAAtB,CAAmC,CAAnC,CAAhB,CAEA;AACA,GAAIC,CAAAA,EAAJ,CAAQC,EAAR,CAAYC,KAAZ,CAEA;AACAN,OAAO,CAACO,eAAR,CAA0B,SAASC,CAAT,CAAY,CACpC,GAAMJ,CAAAA,EAAE,CAAGJ,OAAO,CAACS,MAAnB,CACA;AACAL,EAAE,CAACM,iBAAH,CAAqB,UAArB,CAAiC,CAAEC,OAAO,CAAE,KAAX,CAAjC,EACAP,EAAE,CAACM,iBAAH,CAAqB,YAArB,CAAmC,CAAEC,OAAO,CAAE,KAAX,CAAnC,EACAP,EAAE,CAACM,iBAAH,CAAqB,MAArB,CAA6B,CAAEC,OAAO,CAAE,KAAX,CAA7B,EACD,CAND,CAQA;AACAX,OAAO,CAACY,OAAR,CAAkB,SAASJ,CAAT,CAAY,CAC5BK,OAAO,CAACC,GAAR,CAAY,oBAAZ,EACD,CAFD,CAIA;AACAd,OAAO,CAACe,SAAR,CAAoB,SAASP,CAAT,CAAY,CAC9B;AACAJ,EAAE,CAAGJ,OAAO,CAACS,MAAb,CACA;AACAJ,EAAE,CAAGD,EAAE,CAACY,WAAH,CAAetB,SAAf,CAA0B,WAA1B,CAAL,CACA;AACAY,KAAK,CAAGD,EAAE,CAACY,WAAH,CAAevB,SAAf,CAAR,CAEA;AACAU,EAAE,CAACQ,OAAH,CAAa,SAASJ,CAAT,CAAY,CACvBK,OAAO,CAACC,GAAR,CAAY,OAAZ,CAAqBN,CAArB,EACD,CAFD,CAIA,OAAQb,MAAR,EACE,IAAK,KAAL,CACEW,KAAK,CAACY,GAAN,CAAUtB,MAAV,EACAE,OAAO,CAACF,MAAD,CAAP,CACA,MACF,IAAK,KAAL,CACE,GAAMuB,CAAAA,GAAG,CAAGb,KAAK,CAACc,MAAN,EAAZ,CACAD,GAAG,CAACJ,SAAJ,CAAgB,UAAW,CACzBjB,OAAO,CAACqB,GAAG,CAACV,MAAL,CAAP,CACD,CAFD,CAGA,MACF,IAAK,QAAL,CACEH,KAAK,CAACe,MAAN,CAAazB,MAAM,CAAC0B,GAApB,EACA,MACF,QACET,OAAO,CAACC,GAAR,CAAY,iBAAZ,EACA,MAhBJ,CAmBA;AACAT,EAAE,CAACkB,UAAH,CAAgB,UAAW,CACzBnB,EAAE,CAACoB,KAAH,GACD,CAFD,CAGD,CApCD,CAsCD,CA5DM,CAAP,CA6DD","sourcesContent":["export function pluralize(name, count) {\r\n  if (count === 1) {\r\n    return name\r\n  }\r\n  return name + 's'\r\n}\r\n\r\nexport function idbPromise(storeName, method, object) {\r\n  return new Promise((resolve, reject) => {\r\n    // open connection to the database `shop-shop` with the version of 1\r\n    const request = window.indexedDB.open('shop-shop', 1);\r\n\r\n    // create variables to hold reference to the database, transaction (tx), and object store\r\n    let db, tx, store;\r\n\r\n    // if version has changed (or if this is the first time using the database), run this method and create the three object stores \r\n    request.onupgradeneeded = function(e) {\r\n      const db = request.result;\r\n      // create object store for each type of data and set \"primary\" key index to be the `_id` of the data\r\n      db.createObjectStore('products', { keyPath: '_id' });\r\n      db.createObjectStore('categories', { keyPath: '_id' });\r\n      db.createObjectStore('cart', { keyPath: '_id' });\r\n    };\r\n\r\n    // handle any errors with connecting\r\n    request.onerror = function(e) {\r\n      console.log('There was an error');\r\n    };\r\n\r\n    // on database open success\r\n    request.onsuccess = function(e) {\r\n      // save a reference of the database to the `db` variable\r\n      db = request.result;\r\n      // open a transaction do whatever we pass into `storeName` (must match one of the object store names)\r\n      tx = db.transaction(storeName, 'readwrite');\r\n      // save a reference to that object store\r\n      store = tx.objectStore(storeName);\r\n\r\n      // if there's any errors, let us know\r\n      db.onerror = function(e) {\r\n        console.log('error', e);\r\n      };\r\n\r\n      switch (method) {\r\n        case 'put':\r\n          store.put(object);\r\n          resolve(object);\r\n          break;\r\n        case 'get':\r\n          const all = store.getAll();\r\n          all.onsuccess = function() {\r\n            resolve(all.result);\r\n          };\r\n          break;\r\n        case 'delete':\r\n          store.delete(object._id);\r\n          break;\r\n        default:\r\n          console.log('No valid method');\r\n          break;\r\n      }\r\n      \r\n      // when the transaction is complete, close the connection\r\n      tx.oncomplete = function() {\r\n        db.close();\r\n      };\r\n    };\r\n\r\n  });\r\n}\r\n"]},"metadata":{},"sourceType":"module"}